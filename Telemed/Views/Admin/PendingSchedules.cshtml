@model IEnumerable<Telemed.Models.DoctorSchedule>
@{
    ViewData["Title"] = "Pending Schedules";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">

<div class="container py-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-primary"><i class="bi bi-clock-history me-2"></i>Pending Doctor Schedules</h2>
    </div>

    @if (!Model.Any())
    {
        <div class="text-center py-5">
            <i class="bi bi-calendar-x text-muted" style="font-size: 3rem;"></i>
            <h5 class="text-muted mt-3">No pending schedules found</h5>
        </div>
    }
    else
    {
        <div class="mb-3">
            <input id="searchInput" type="text" class="form-control form-control-lg rounded-pill" placeholder="Search by doctor or date...">
        </div>

        @foreach (var doctorGroup in Model.GroupBy(s => s.Doctor))
        {
            <div class="card shadow-sm mb-4 rounded-4 doctor-card">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <span><i class="bi bi-person-badge me-2"></i>@doctorGroup.Key.FullName</span>
                    <div>
                        <button class="btn btn-success btn-sm rounded-pill approve-all-btn" data-doctor-id="@doctorGroup.Key.DoctorId">
                            <i class="bi bi-check-circle"></i> Approve All
                        </button>
                        <button class="btn btn-danger btn-sm rounded-pill reject-all-btn" data-doctor-id="@doctorGroup.Key.DoctorId">
                            <i class="bi bi-x-circle"></i> Reject All
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        @foreach (var schedule in doctorGroup.OrderBy(s => s.Date))
                        {
                            <div class="col-md-4 schedule-card">
                                <div class="card border shadow-sm h-100">
                                    <div class="card-body d-flex flex-column justify-content-between">
                                        <div>
                                            <h6 class="card-title mb-2">@schedule.Date.ToString("dd MMM yyyy")</h6>
                                            <p class="mb-1"><strong>Start:</strong> @schedule.StartTime.ToString(@"hh\:mm")</p>
                                            <p class="mb-1"><strong>End:</strong> @schedule.EndTime.ToString(@"hh\:mm")</p>
                                            <span class="badge @(schedule.IsApproved ? "bg-success" : "bg-warning")">
                                                @(schedule.IsApproved ? "Approved" : "Pending")
                                            </span>
                                        </div>
                                        <div class="mt-3 d-flex gap-2 flex-wrap">
                                            <button class="btn btn-outline-success btn-sm rounded-pill approve-btn"
                                                    data-id="@schedule.ScheduleId"
                                                    @(schedule.IsApproved ? "disabled" : "")>
                                                <i class="bi bi-check2-circle"></i> Approve
                                            </button>

                                            <button class="btn btn-outline-primary btn-sm rounded-pill edit-btn"
                                                    data-id="@schedule.ScheduleId"
                                                    data-date="@schedule.Date.ToString("yyyy-MM-dd")"
                                                    data-start="@schedule.StartTime.ToString(@"hh\:mm")"
                                                    data-end="@schedule.EndTime.ToString(@"hh\:mm")">
                                                <i class="bi bi-pencil-square"></i> Edit
                                            </button>

                                            <button class="btn btn-outline-danger btn-sm rounded-pill delete-btn"
                                                    data-id="@schedule.ScheduleId">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-4 border-0 shadow">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title"><i class="bi bi-pencil-square me-1"></i> Edit Schedule</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form id="editForm">
                <div class="modal-body">
                    <input type="hidden" id="editScheduleId" />
                    <div class="mb-3">
                        <label class="form-label">Date</label>
                        <input type="date" id="editDate" class="form-control" required />
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Start Time</label>
                            <input type="time" id="editStartTime" class="form-control" required />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">End Time</label>
                            <input type="time" id="editEndTime" class="form-control" required />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary px-4 rounded-pill">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        console.log("✅ PendingSchedules script loaded");

        const modal = new bootstrap.Modal(document.getElementById('editModal'));

        // ---------- Approve All ----------
        document.querySelectorAll('.approve-all-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const doctorId = parseInt(btn.dataset.doctorId);
                Swal.fire({
                    title: 'Approve all schedules?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Approve All',
                    confirmButtonColor: '#28a745'
                }).then(result => {
                    if (result.isConfirmed) {
                        fetch('@Url.Action("ApproveAllSchedules", "Admin")', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ DoctorId: doctorId })
                        }).then(res => res.json())
                        .then(data => Swal.fire(data.success ? 'Success' : 'Error', data.message, data.success ? 'success' : 'error')
                        .then(() => { if (data.success) location.reload(); }));
                    }
                });
            });
        });

        // ---------- Reject All ----------
        document.querySelectorAll('.reject-all-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const doctorId = parseInt(btn.dataset.doctorId);
                Swal.fire({
                    title: 'Reject all schedules?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Reject All',
                    confirmButtonColor: '#d33'
                }).then(result => {
                    if (result.isConfirmed) {
                        fetch('@Url.Action("RejectAllSchedules", "Admin")', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ DoctorId: doctorId })
                        }).then(res => res.json())
                        .then(data => Swal.fire(data.success ? 'Rejected' : 'Error', data.message, data.success ? 'success' : 'error')
                        .then(() => { if (data.success) location.reload(); }));
                    }
                });
            });
        });

        // ---------- Individual Approve ----------
        document.querySelectorAll('.approve-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const id = parseInt(btn.dataset.id);
                Swal.fire({
                    title: 'Approve this schedule?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Approve',
                    confirmButtonColor: '#28a745'
                }).then(result => {
                    if (result.isConfirmed) {
                        fetch('@Url.Action("ApproveSchedule", "Admin")', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json; charset=utf-8' },
                            body: JSON.stringify({ scheduleId: id })
                        }).then(res => res.json())
                        .then(data => Swal.fire(data.success ? 'Approved!' : 'Error', data.message, data.success ? 'success' : 'error')
                        .then(() => { if (data.success) location.reload(); }));
                    }
                });
            });
        });

        // ---------- Individual Delete/Reject ----------
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const id = parseInt(btn.dataset.id);
                Swal.fire({
                    title: 'Reject this schedule?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Reject',
                    confirmButtonColor: '#d33'
                }).then(result => {
                    if (result.isConfirmed) {
                        fetch('@Url.Action("RejectSchedule", "Admin")', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json; charset=utf-8' },
                            body: JSON.stringify({ scheduleId: id })
                        }).then(res => res.json())
                        .then(data => Swal.fire(data.success ? 'Rejected!' : 'Error', data.message, data.success ? 'success' : 'error')
                        .then(() => { if (data.success) location.reload(); }));
                    }
                });
            });
        });

        // ---------- Edit ----------
        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.getElementById('editScheduleId').value = btn.dataset.id;
                document.getElementById('editDate').value = btn.dataset.date;
                document.getElementById('editStartTime').value = btn.dataset.start;
                document.getElementById('editEndTime').value = btn.dataset.end;
                modal.show();
            });
        });

        // ---------- Edit Form Submit ----------
        document.getElementById('editForm').addEventListener('submit', function(e){
            e.preventDefault();
            const id = parseInt(document.getElementById('editScheduleId').value);
            const date = document.getElementById('editDate').value;
            const start = document.getElementById('editStartTime').value;
            const end = document.getElementById('editEndTime').value;

            fetch('@Url.Action("EditSchedule", "Admin")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ ScheduleId: id, Date: date, StartTime: start, EndTime: end })
            }).then(res => res.json())
            .then(data => Swal.fire(data.success ? 'Updated!' : 'Error', data.message, data.success ? 'success' : 'error')
            .then(() => { if(data.success){ modal.hide(); location.reload(); }}));
        });

    </script>
}
